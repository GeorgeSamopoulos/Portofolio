Terminals unused in grammar

   OTHER


State 37 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | /* empty */

    3 stmt: expr SEMICOLON
    4     | ifstmt
    5     | whilestmt
    6     | forstmt
    7     | returnstmt SEMICOLON
    8     | BREAK SEMICOLON
    9     | CONT SEMICOLON

   10 $@1: /* empty */

   11 stmt: $@1 block
   12     | funcdef
   13     | SEMICOLON

   14 expr: assignexpr
   15     | expr PLUS expr
   16     | expr MINUS expr
   17     | expr MULTIPLY expr
   18     | expr MODULE expr
   19     | expr DIVIDE expr
   20     | expr GREAT_EQUAL expr
   21     | expr LESS_EQUAL expr
   22     | expr GREATER expr
   23     | expr LESS expr
   24     | expr EQUAL expr
   25     | expr NOTEQUAL expr
   26     | expr AND expr
   27     | expr OR expr
   28     | term

   29 term: L_PARENTH expr R_PARENTH
   30     | MINUS expr
   31     | NOT expr
   32     | INCREASE lvalue
   33     | lvalue INCREASE
   34     | DECREASE lvalue
   35     | lvalue DECREASE
   36     | primary

   37 $@2: /* empty */

   38 assignexpr: lvalue $@2 ASSIGN expr

   39 primary: lvalue
   40        | call
   41        | objectdef
   42        | L_PARENTH funcdef R_PARENTH
   43        | const

   44 lvalue: ID
   45       | LOCAL ID
   46       | D_COLON ID
   47       | member

   48 member: lvalue DOT ID

   49 $@3: /* empty */

   50 member: lvalue $@3 L_S_BRACKET expr R_S_BRACKET
   51       | call DOT ID
   52       | call L_S_BRACKET expr R_S_BRACKET

   53 $@4: /* empty */

   54 call: call $@4 L_PARENTH elist R_PARENTH

   55 $@5: /* empty */

   56 call: lvalue $@5 callsuffix
   57     | L_PARENTH funcdef R_PARENTH L_PARENTH elist R_PARENTH

   58 callsuffix: normcall
   59           | methodcall

   60 normcall: L_PARENTH elist R_PARENTH

   61 methodcall: D_DOT ID L_PARENTH elist R_PARENTH

   62 elist: expr
   63      | elist COMA expr
   64      | /* empty */

   65 $@6: /* empty */

   66 objectdef: L_S_BRACKET $@6 elist R_S_BRACKET

   67 $@7: /* empty */

   68 objectdef: L_S_BRACKET $@7 indexed R_S_BRACKET

   69 indexed: indexedelem
   70        | indexed COMA indexedelem

   71 indexedelem: L_C_BRACKET expr COLON expr R_C_BRACKET

   72 $@8: /* empty */

   73 block: L_C_BRACKET $@8 insideblock R_C_BRACKET

   74 insideblock: insideblock stmt
   75            | /* empty */

   76 $@9: /* empty */

   77 $@10: /* empty */

   78 funcdef: FUNCTION ID $@9 L_PARENTH idlist R_PARENTH $@10 block

   79 $@11: /* empty */

   80 $@12: /* empty */

   81 funcdef: FUNCTION L_PARENTH $@11 idlist R_PARENTH $@12 block

   82 const: INTCONST
   83      | RCONST
   84      | STRING
   85      | NIL
   86      | TRUE
   87      | FALSE

   88 idlist: ID
   89       | idlist COMA ID
   90       | /* empty */

   91 $@13: /* empty */

   92 $@14: /* empty */

   93 ifstmt: IF $@13 L_PARENTH expr R_PARENTH $@14 stmt

   94 $@15: /* empty */

   95 ifstmt: ifstmt ELSE $@15 stmt

   96 $@16: /* empty */

   97 $@17: /* empty */

   98 whilestmt: WHILE $@16 L_PARENTH expr R_PARENTH $@17 stmt

   99 $@18: /* empty */

  100 $@19: /* empty */

  101 $@20: /* empty */

  102 $@21: /* empty */

  103 $@22: /* empty */

  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 expr $@20 SEMICOLON $@21 elist R_PARENTH $@22 stmt

  105 returnstmt: RETURN
  106           | RETURN expr


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 44 45 46 48 51 61 78 88 89
STRING (259) 84
WHILE (260) 98
FOR (261) 104
IF (262) 93
ELSE (263) 95
FUNCTION (264) 78 81
RETURN (265) 105 106
BREAK (266) 8
CONT (267) 9
LOCAL (268) 45
TRUE (269) 86
FALSE (270) 87
NIL (271) 85
AND (272) 26
OR (273) 27
NOT (274) 31
PLUS (275) 15
MINUS (276) 16 30
ASSIGN (277) 38
MULTIPLY (278) 17
MODULE (279) 18
DIVIDE (280) 19
DECREASE (281) 34 35
INCREASE (282) 32 33
GREAT_EQUAL (283) 20
LESS_EQUAL (284) 21
GREATER (285) 22
LESS (286) 23
EQUAL (287) 24
NOTEQUAL (288) 25
L_C_BRACKET (289) 71 73
R_C_BRACKET (290) 71 73
L_S_BRACKET (291) 50 52 66 68
R_S_BRACKET (292) 50 52 66 68
L_PARENTH (293) 29 42 54 57 60 61 78 81 93 98 104
R_PARENTH (294) 29 42 54 57 60 61 78 81 93 98 104
COMA (295) 63 70 89
SEMICOLON (296) 3 7 8 9 13 104
COLON (297) 71
D_COLON (298) 46
DOT (299) 48 51
D_DOT (300) 61
OTHER (301)
INTCONST (302) 82
RCONST (303) 83


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0 1
stmt (51)
    on left: 3 4 5 6 7 8 9 11 12 13, on right: 1 74 93 95 98 104
$@1 (52)
    on left: 10, on right: 11
expr (53)
    on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28, on right:
    3 15 16 17 18 19 20 21 22 23 24 25 26 27 29 30 31 38 50 52 62 63
    71 93 98 104 106
term (54)
    on left: 29 30 31 32 33 34 35 36, on right: 28
assignexpr (55)
    on left: 38, on right: 14
$@2 (56)
    on left: 37, on right: 38
primary (57)
    on left: 39 40 41 42 43, on right: 36
lvalue (58)
    on left: 44 45 46 47, on right: 32 33 34 35 38 39 48 50 56
member (59)
    on left: 48 50 51 52, on right: 47
$@3 (60)
    on left: 49, on right: 50
call (61)
    on left: 54 56 57, on right: 40 51 52 54
$@4 (62)
    on left: 53, on right: 54
$@5 (63)
    on left: 55, on right: 56
callsuffix (64)
    on left: 58 59, on right: 56
normcall (65)
    on left: 60, on right: 58
methodcall (66)
    on left: 61, on right: 59
elist (67)
    on left: 62 63 64, on right: 54 57 60 61 63 66 104
objectdef (68)
    on left: 66 68, on right: 41
$@6 (69)
    on left: 65, on right: 66
$@7 (70)
    on left: 67, on right: 68
indexed (71)
    on left: 69 70, on right: 68 70
indexedelem (72)
    on left: 71, on right: 69 70
block (73)
    on left: 73, on right: 11 78 81
$@8 (74)
    on left: 72, on right: 73
insideblock (75)
    on left: 74 75, on right: 73 74
funcdef (76)
    on left: 78 81, on right: 12 42 57
$@9 (77)
    on left: 76, on right: 78
$@10 (78)
    on left: 77, on right: 78
$@11 (79)
    on left: 79, on right: 81
$@12 (80)
    on left: 80, on right: 81
const (81)
    on left: 82 83 84 85 86 87, on right: 43
idlist (82)
    on left: 88 89 90, on right: 78 81 89
ifstmt (83)
    on left: 93 95, on right: 4 95
$@13 (84)
    on left: 91, on right: 93
$@14 (85)
    on left: 92, on right: 93
$@15 (86)
    on left: 94, on right: 95
whilestmt (87)
    on left: 98, on right: 5
$@16 (88)
    on left: 96, on right: 98
$@17 (89)
    on left: 97, on right: 98
forstmt (90)
    on left: 104, on right: 6
$@18 (91)
    on left: 99, on right: 104
$@19 (92)
    on left: 100, on right: 104
$@20 (93)
    on left: 101, on right: 104
$@21 (94)
    on left: 102, on right: 104
$@22 (95)
    on left: 103, on right: 104
returnstmt (96)
    on left: 105 106, on right: 7


state 0

    0 $accept: . program $end

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    FUNCTION     shift, and go to state 6
    RETURN       shift, and go to state 7
    BREAK        shift, and go to state 8
    CONT         shift, and go to state 9
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    SEMICOLON    shift, and go to state 20
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    L_C_BRACKET  reduce using rule 10 ($@1)
    $default     reduce using rule 2 (program)

    program     go to state 24
    stmt        go to state 25
    $@1         go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 35
    const       go to state 36
    ifstmt      go to state 37
    whilestmt   go to state 38
    forstmt     go to state 39
    returnstmt  go to state 40


state 1

   44 lvalue: ID .

    $default  reduce using rule 44 (lvalue)


state 2

   84 const: STRING .

    $default  reduce using rule 84 (const)


state 3

   98 whilestmt: WHILE . $@16 L_PARENTH expr R_PARENTH $@17 stmt

    $default  reduce using rule 96 ($@16)

    $@16  go to state 41


state 4

  104 forstmt: FOR . $@18 L_PARENTH elist SEMICOLON $@19 expr $@20 SEMICOLON $@21 elist R_PARENTH $@22 stmt

    $default  reduce using rule 99 ($@18)

    $@18  go to state 42


state 5

   93 ifstmt: IF . $@13 L_PARENTH expr R_PARENTH $@14 stmt

    $default  reduce using rule 91 ($@13)

    $@13  go to state 43


state 6

   78 funcdef: FUNCTION . ID $@9 L_PARENTH idlist R_PARENTH $@10 block
   81        | FUNCTION . L_PARENTH $@11 idlist R_PARENTH $@12 block

    ID         shift, and go to state 44
    L_PARENTH  shift, and go to state 45


state 7

  105 returnstmt: RETURN .
  106           | RETURN . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 105 (returnstmt)

    expr        go to state 46
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 8

    8 stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 47


state 9

    9 stmt: CONT . SEMICOLON

    SEMICOLON  shift, and go to state 48


state 10

   45 lvalue: LOCAL . ID

    ID  shift, and go to state 49


state 11

   86 const: TRUE .

    $default  reduce using rule 86 (const)


state 12

   87 const: FALSE .

    $default  reduce using rule 87 (const)


state 13

   85 const: NIL .

    $default  reduce using rule 85 (const)


state 14

   31 term: NOT . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 50
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 15

   30 term: MINUS . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 51
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 16

   34 term: DECREASE . lvalue

    ID         shift, and go to state 1
    LOCAL      shift, and go to state 10
    L_PARENTH  shift, and go to state 52
    D_COLON    shift, and go to state 21

    lvalue  go to state 53
    member  go to state 32
    call    go to state 54


state 17

   32 term: INCREASE . lvalue

    ID         shift, and go to state 1
    LOCAL      shift, and go to state 10
    L_PARENTH  shift, and go to state 52
    D_COLON    shift, and go to state 21

    lvalue  go to state 55
    member  go to state 32
    call    go to state 54


state 18

   66 objectdef: L_S_BRACKET . $@6 elist R_S_BRACKET
   68          | L_S_BRACKET . $@7 indexed R_S_BRACKET

    L_C_BRACKET  reduce using rule 67 ($@7)
    $default     reduce using rule 65 ($@6)

    $@6  go to state 56
    $@7  go to state 57


state 19

   29 term: L_PARENTH . expr R_PARENTH
   42 primary: L_PARENTH . funcdef R_PARENTH
   57 call: L_PARENTH . funcdef R_PARENTH L_PARENTH elist R_PARENTH

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    FUNCTION     shift, and go to state 6
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 58
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 59
    const       go to state 36


state 20

   13 stmt: SEMICOLON .

    $default  reduce using rule 13 (stmt)


state 21

   46 lvalue: D_COLON . ID

    ID  shift, and go to state 60


state 22

   82 const: INTCONST .

    $default  reduce using rule 82 (const)


state 23

   83 const: RCONST .

    $default  reduce using rule 83 (const)


state 24

    0 $accept: program . $end

    $end  shift, and go to state 61


state 25

    1 program: stmt . program

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    FUNCTION     shift, and go to state 6
    RETURN       shift, and go to state 7
    BREAK        shift, and go to state 8
    CONT         shift, and go to state 9
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    SEMICOLON    shift, and go to state 20
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    L_C_BRACKET  reduce using rule 10 ($@1)
    $default     reduce using rule 2 (program)

    program     go to state 62
    stmt        go to state 25
    $@1         go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 35
    const       go to state 36
    ifstmt      go to state 37
    whilestmt   go to state 38
    forstmt     go to state 39
    returnstmt  go to state 40


state 26

   11 stmt: $@1 . block

    L_C_BRACKET  shift, and go to state 63

    block  go to state 64


state 27

    3 stmt: expr . SEMICOLON
   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77
    SEMICOLON    shift, and go to state 78


state 28

   28 expr: term .

    $default  reduce using rule 28 (expr)


state 29

   14 expr: assignexpr .

    $default  reduce using rule 14 (expr)


state 30

   36 term: primary .

    $default  reduce using rule 36 (term)


state 31

   33 term: lvalue . INCREASE
   35     | lvalue . DECREASE
   38 assignexpr: lvalue . $@2 ASSIGN expr
   39 primary: lvalue .
   48 member: lvalue . DOT ID
   50       | lvalue . $@3 L_S_BRACKET expr R_S_BRACKET
   56 call: lvalue . $@5 callsuffix

    DECREASE  shift, and go to state 79
    INCREASE  shift, and go to state 80
    DOT       shift, and go to state 81

    ASSIGN       reduce using rule 37 ($@2)
    L_S_BRACKET  reduce using rule 49 ($@3)
    L_PARENTH    reduce using rule 55 ($@5)
    D_DOT        reduce using rule 55 ($@5)
    $default     reduce using rule 39 (primary)

    $@2  go to state 82
    $@3  go to state 83
    $@5  go to state 84


state 32

   47 lvalue: member .

    $default  reduce using rule 47 (lvalue)


state 33

   40 primary: call .
   51 member: call . DOT ID
   52       | call . L_S_BRACKET expr R_S_BRACKET
   54 call: call . $@4 L_PARENTH elist R_PARENTH

    L_S_BRACKET  shift, and go to state 85
    DOT          shift, and go to state 86

    L_PARENTH  reduce using rule 53 ($@4)
    $default   reduce using rule 40 (primary)

    $@4  go to state 87


state 34

   41 primary: objectdef .

    $default  reduce using rule 41 (primary)


state 35

   12 stmt: funcdef .

    $default  reduce using rule 12 (stmt)


state 36

   43 primary: const .

    $default  reduce using rule 43 (primary)


state 37

    4 stmt: ifstmt .
   95 ifstmt: ifstmt . ELSE $@15 stmt

    ELSE  shift, and go to state 88

    ELSE      [reduce using rule 4 (stmt)]
    $default  reduce using rule 4 (stmt)


state 38

    5 stmt: whilestmt .

    $default  reduce using rule 5 (stmt)


state 39

    6 stmt: forstmt .

    $default  reduce using rule 6 (stmt)


state 40

    7 stmt: returnstmt . SEMICOLON

    SEMICOLON  shift, and go to state 89


state 41

   98 whilestmt: WHILE $@16 . L_PARENTH expr R_PARENTH $@17 stmt

    L_PARENTH  shift, and go to state 90


state 42

  104 forstmt: FOR $@18 . L_PARENTH elist SEMICOLON $@19 expr $@20 SEMICOLON $@21 elist R_PARENTH $@22 stmt

    L_PARENTH  shift, and go to state 91


state 43

   93 ifstmt: IF $@13 . L_PARENTH expr R_PARENTH $@14 stmt

    L_PARENTH  shift, and go to state 92


state 44

   78 funcdef: FUNCTION ID . $@9 L_PARENTH idlist R_PARENTH $@10 block

    $default  reduce using rule 76 ($@9)

    $@9  go to state 93


state 45

   81 funcdef: FUNCTION L_PARENTH . $@11 idlist R_PARENTH $@12 block

    $default  reduce using rule 79 ($@11)

    $@11  go to state 94


state 46

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
  106 returnstmt: RETURN expr .

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77

    $default  reduce using rule 106 (returnstmt)


state 47

    8 stmt: BREAK SEMICOLON .

    $default  reduce using rule 8 (stmt)


state 48

    9 stmt: CONT SEMICOLON .

    $default  reduce using rule 9 (stmt)


state 49

   45 lvalue: LOCAL ID .

    $default  reduce using rule 45 (lvalue)


state 50

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   31 term: NOT expr .

    $default  reduce using rule 31 (term)


state 51

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   30 term: MINUS expr .

    MULTIPLY  shift, and go to state 69
    MODULE    shift, and go to state 70
    DIVIDE    shift, and go to state 71

    $default  reduce using rule 30 (term)


state 52

   57 call: L_PARENTH . funcdef R_PARENTH L_PARENTH elist R_PARENTH

    FUNCTION  shift, and go to state 6

    funcdef  go to state 95


state 53

   34 term: DECREASE lvalue .
   48 member: lvalue . DOT ID
   50       | lvalue . $@3 L_S_BRACKET expr R_S_BRACKET
   56 call: lvalue . $@5 callsuffix

    DOT  shift, and go to state 81

    L_S_BRACKET  reduce using rule 49 ($@3)
    L_PARENTH    reduce using rule 55 ($@5)
    D_DOT        reduce using rule 55 ($@5)
    $default     reduce using rule 34 (term)

    $@3  go to state 83
    $@5  go to state 84


state 54

   51 member: call . DOT ID
   52       | call . L_S_BRACKET expr R_S_BRACKET
   54 call: call . $@4 L_PARENTH elist R_PARENTH

    L_S_BRACKET  shift, and go to state 85
    DOT          shift, and go to state 86

    $default  reduce using rule 53 ($@4)

    $@4  go to state 87


state 55

   32 term: INCREASE lvalue .
   48 member: lvalue . DOT ID
   50       | lvalue . $@3 L_S_BRACKET expr R_S_BRACKET
   56 call: lvalue . $@5 callsuffix

    DOT  shift, and go to state 81

    L_S_BRACKET  reduce using rule 49 ($@3)
    L_PARENTH    reduce using rule 55 ($@5)
    D_DOT        reduce using rule 55 ($@5)
    $default     reduce using rule 32 (term)

    $@3  go to state 83
    $@5  go to state 84


state 56

   66 objectdef: L_S_BRACKET $@6 . elist R_S_BRACKET

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 64 (elist)

    expr        go to state 96
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 97
    objectdef   go to state 34
    const       go to state 36


state 57

   68 objectdef: L_S_BRACKET $@7 . indexed R_S_BRACKET

    L_C_BRACKET  shift, and go to state 98

    indexed      go to state 99
    indexedelem  go to state 100


state 58

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   29 term: L_PARENTH expr . R_PARENTH

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77
    R_PARENTH    shift, and go to state 101


state 59

   42 primary: L_PARENTH funcdef . R_PARENTH
   57 call: L_PARENTH funcdef . R_PARENTH L_PARENTH elist R_PARENTH

    R_PARENTH  shift, and go to state 102


state 60

   46 lvalue: D_COLON ID .

    $default  reduce using rule 46 (lvalue)


state 61

    0 $accept: program $end .

    $default  accept


state 62

    1 program: stmt program .

    $default  reduce using rule 1 (program)


state 63

   73 block: L_C_BRACKET . $@8 insideblock R_C_BRACKET

    $default  reduce using rule 72 ($@8)

    $@8  go to state 103


state 64

   11 stmt: $@1 block .

    $default  reduce using rule 11 (stmt)


state 65

   26 expr: expr AND . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 104
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 66

   27 expr: expr OR . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 105
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 67

   15 expr: expr PLUS . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 106
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 68

   16 expr: expr MINUS . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 107
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 69

   17 expr: expr MULTIPLY . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 108
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 70

   18 expr: expr MODULE . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 109
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 71

   19 expr: expr DIVIDE . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 110
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 72

   20 expr: expr GREAT_EQUAL . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 111
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 73

   21 expr: expr LESS_EQUAL . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 112
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 74

   22 expr: expr GREATER . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 113
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 75

   23 expr: expr LESS . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 114
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 76

   24 expr: expr EQUAL . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 115
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 77

   25 expr: expr NOTEQUAL . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 116
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 78

    3 stmt: expr SEMICOLON .

    $default  reduce using rule 3 (stmt)


state 79

   35 term: lvalue DECREASE .

    $default  reduce using rule 35 (term)


state 80

   33 term: lvalue INCREASE .

    $default  reduce using rule 33 (term)


state 81

   48 member: lvalue DOT . ID

    ID  shift, and go to state 117


state 82

   38 assignexpr: lvalue $@2 . ASSIGN expr

    ASSIGN  shift, and go to state 118


state 83

   50 member: lvalue $@3 . L_S_BRACKET expr R_S_BRACKET

    L_S_BRACKET  shift, and go to state 119


state 84

   56 call: lvalue $@5 . callsuffix

    L_PARENTH  shift, and go to state 120
    D_DOT      shift, and go to state 121

    callsuffix  go to state 122
    normcall    go to state 123
    methodcall  go to state 124


state 85

   52 member: call L_S_BRACKET . expr R_S_BRACKET

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 125
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 86

   51 member: call DOT . ID

    ID  shift, and go to state 126


state 87

   54 call: call $@4 . L_PARENTH elist R_PARENTH

    L_PARENTH  shift, and go to state 127


state 88

   95 ifstmt: ifstmt ELSE . $@15 stmt

    $default  reduce using rule 94 ($@15)

    $@15  go to state 128


state 89

    7 stmt: returnstmt SEMICOLON .

    $default  reduce using rule 7 (stmt)


state 90

   98 whilestmt: WHILE $@16 L_PARENTH . expr R_PARENTH $@17 stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 129
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 91

  104 forstmt: FOR $@18 L_PARENTH . elist SEMICOLON $@19 expr $@20 SEMICOLON $@21 elist R_PARENTH $@22 stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 64 (elist)

    expr        go to state 96
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 130
    objectdef   go to state 34
    const       go to state 36


state 92

   93 ifstmt: IF $@13 L_PARENTH . expr R_PARENTH $@14 stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 131
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 93

   78 funcdef: FUNCTION ID $@9 . L_PARENTH idlist R_PARENTH $@10 block

    L_PARENTH  shift, and go to state 132


state 94

   81 funcdef: FUNCTION L_PARENTH $@11 . idlist R_PARENTH $@12 block

    ID  shift, and go to state 133

    $default  reduce using rule 90 (idlist)

    idlist  go to state 134


state 95

   57 call: L_PARENTH funcdef . R_PARENTH L_PARENTH elist R_PARENTH

    R_PARENTH  shift, and go to state 135


state 96

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   62 elist: expr .

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77

    $default  reduce using rule 62 (elist)


state 97

   63 elist: elist . COMA expr
   66 objectdef: L_S_BRACKET $@6 elist . R_S_BRACKET

    R_S_BRACKET  shift, and go to state 136
    COMA         shift, and go to state 137


state 98

   71 indexedelem: L_C_BRACKET . expr COLON expr R_C_BRACKET

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 138
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 99

   68 objectdef: L_S_BRACKET $@7 indexed . R_S_BRACKET
   70 indexed: indexed . COMA indexedelem

    R_S_BRACKET  shift, and go to state 139
    COMA         shift, and go to state 140


state 100

   69 indexed: indexedelem .

    $default  reduce using rule 69 (indexed)


state 101

   29 term: L_PARENTH expr R_PARENTH .

    $default  reduce using rule 29 (term)


state 102

   42 primary: L_PARENTH funcdef R_PARENTH .
   57 call: L_PARENTH funcdef R_PARENTH . L_PARENTH elist R_PARENTH

    L_PARENTH  shift, and go to state 141

    $default  reduce using rule 42 (primary)


state 103

   73 block: L_C_BRACKET $@8 . insideblock R_C_BRACKET

    $default  reduce using rule 75 (insideblock)

    insideblock  go to state 142


state 104

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   26     | expr AND expr .
   27     | expr . OR expr

    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77

    $default  reduce using rule 26 (expr)


state 105

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   27     | expr OR expr .

    AND          shift, and go to state 65
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77

    $default  reduce using rule 27 (expr)


state 106

   15 expr: expr . PLUS expr
   15     | expr PLUS expr .
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    MULTIPLY  shift, and go to state 69
    MODULE    shift, and go to state 70
    DIVIDE    shift, and go to state 71

    $default  reduce using rule 15 (expr)


state 107

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   16     | expr MINUS expr .
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    MULTIPLY  shift, and go to state 69
    MODULE    shift, and go to state 70
    DIVIDE    shift, and go to state 71

    $default  reduce using rule 16 (expr)


state 108

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   17     | expr MULTIPLY expr .
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    $default  reduce using rule 17 (expr)


state 109

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   18     | expr MODULE expr .
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    $default  reduce using rule 18 (expr)


state 110

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   19     | expr DIVIDE expr .
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    $default  reduce using rule 19 (expr)


state 111

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   20     | expr GREAT_EQUAL expr .
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    PLUS      shift, and go to state 67
    MINUS     shift, and go to state 68
    MULTIPLY  shift, and go to state 69
    MODULE    shift, and go to state 70
    DIVIDE    shift, and go to state 71

    GREAT_EQUAL  error (nonassociative)
    LESS_EQUAL   error (nonassociative)
    GREATER      error (nonassociative)
    LESS         error (nonassociative)

    $default  reduce using rule 20 (expr)


state 112

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   21     | expr LESS_EQUAL expr .
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    PLUS      shift, and go to state 67
    MINUS     shift, and go to state 68
    MULTIPLY  shift, and go to state 69
    MODULE    shift, and go to state 70
    DIVIDE    shift, and go to state 71

    GREAT_EQUAL  error (nonassociative)
    LESS_EQUAL   error (nonassociative)
    GREATER      error (nonassociative)
    LESS         error (nonassociative)

    $default  reduce using rule 21 (expr)


state 113

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   22     | expr GREATER expr .
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    PLUS      shift, and go to state 67
    MINUS     shift, and go to state 68
    MULTIPLY  shift, and go to state 69
    MODULE    shift, and go to state 70
    DIVIDE    shift, and go to state 71

    GREAT_EQUAL  error (nonassociative)
    LESS_EQUAL   error (nonassociative)
    GREATER      error (nonassociative)
    LESS         error (nonassociative)

    $default  reduce using rule 22 (expr)


state 114

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   23     | expr LESS expr .
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    PLUS      shift, and go to state 67
    MINUS     shift, and go to state 68
    MULTIPLY  shift, and go to state 69
    MODULE    shift, and go to state 70
    DIVIDE    shift, and go to state 71

    GREAT_EQUAL  error (nonassociative)
    LESS_EQUAL   error (nonassociative)
    GREATER      error (nonassociative)
    LESS         error (nonassociative)

    $default  reduce using rule 23 (expr)


state 115

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   24     | expr EQUAL expr .
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr

    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75

    EQUAL     error (nonassociative)
    NOTEQUAL  error (nonassociative)

    $default  reduce using rule 24 (expr)


state 116

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   25     | expr NOTEQUAL expr .
   26     | expr . AND expr
   27     | expr . OR expr

    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75

    EQUAL     error (nonassociative)
    NOTEQUAL  error (nonassociative)

    $default  reduce using rule 25 (expr)


state 117

   48 member: lvalue DOT ID .

    $default  reduce using rule 48 (member)


state 118

   38 assignexpr: lvalue $@2 ASSIGN . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 143
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 119

   50 member: lvalue $@3 L_S_BRACKET . expr R_S_BRACKET

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 144
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 120

   60 normcall: L_PARENTH . elist R_PARENTH

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 64 (elist)

    expr        go to state 96
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 145
    objectdef   go to state 34
    const       go to state 36


state 121

   61 methodcall: D_DOT . ID L_PARENTH elist R_PARENTH

    ID  shift, and go to state 146


state 122

   56 call: lvalue $@5 callsuffix .

    $default  reduce using rule 56 (call)


state 123

   58 callsuffix: normcall .

    $default  reduce using rule 58 (callsuffix)


state 124

   59 callsuffix: methodcall .

    $default  reduce using rule 59 (callsuffix)


state 125

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   52 member: call L_S_BRACKET expr . R_S_BRACKET

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77
    R_S_BRACKET  shift, and go to state 147


state 126

   51 member: call DOT ID .

    $default  reduce using rule 51 (member)


state 127

   54 call: call $@4 L_PARENTH . elist R_PARENTH

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 64 (elist)

    expr        go to state 96
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 148
    objectdef   go to state 34
    const       go to state 36


state 128

   95 ifstmt: ifstmt ELSE $@15 . stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    FUNCTION     shift, and go to state 6
    RETURN       shift, and go to state 7
    BREAK        shift, and go to state 8
    CONT         shift, and go to state 9
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    SEMICOLON    shift, and go to state 20
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 10 ($@1)

    stmt        go to state 149
    $@1         go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 35
    const       go to state 36
    ifstmt      go to state 37
    whilestmt   go to state 38
    forstmt     go to state 39
    returnstmt  go to state 40


state 129

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   98 whilestmt: WHILE $@16 L_PARENTH expr . R_PARENTH $@17 stmt

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77
    R_PARENTH    shift, and go to state 150


state 130

   63 elist: elist . COMA expr
  104 forstmt: FOR $@18 L_PARENTH elist . SEMICOLON $@19 expr $@20 SEMICOLON $@21 elist R_PARENTH $@22 stmt

    COMA       shift, and go to state 137
    SEMICOLON  shift, and go to state 151


state 131

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   93 ifstmt: IF $@13 L_PARENTH expr . R_PARENTH $@14 stmt

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77
    R_PARENTH    shift, and go to state 152


state 132

   78 funcdef: FUNCTION ID $@9 L_PARENTH . idlist R_PARENTH $@10 block

    ID  shift, and go to state 133

    $default  reduce using rule 90 (idlist)

    idlist  go to state 153


state 133

   88 idlist: ID .

    $default  reduce using rule 88 (idlist)


state 134

   81 funcdef: FUNCTION L_PARENTH $@11 idlist . R_PARENTH $@12 block
   89 idlist: idlist . COMA ID

    R_PARENTH  shift, and go to state 154
    COMA       shift, and go to state 155


state 135

   57 call: L_PARENTH funcdef R_PARENTH . L_PARENTH elist R_PARENTH

    L_PARENTH  shift, and go to state 141


state 136

   66 objectdef: L_S_BRACKET $@6 elist R_S_BRACKET .

    $default  reduce using rule 66 (objectdef)


state 137

   63 elist: elist COMA . expr

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 156
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 138

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   71 indexedelem: L_C_BRACKET expr . COLON expr R_C_BRACKET

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77
    COLON        shift, and go to state 157


state 139

   68 objectdef: L_S_BRACKET $@7 indexed R_S_BRACKET .

    $default  reduce using rule 68 (objectdef)


state 140

   70 indexed: indexed COMA . indexedelem

    L_C_BRACKET  shift, and go to state 98

    indexedelem  go to state 158


state 141

   57 call: L_PARENTH funcdef R_PARENTH L_PARENTH . elist R_PARENTH

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 64 (elist)

    expr        go to state 96
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 159
    objectdef   go to state 34
    const       go to state 36


state 142

   73 block: L_C_BRACKET $@8 insideblock . R_C_BRACKET
   74 insideblock: insideblock . stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    FUNCTION     shift, and go to state 6
    RETURN       shift, and go to state 7
    BREAK        shift, and go to state 8
    CONT         shift, and go to state 9
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    R_C_BRACKET  shift, and go to state 160
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    SEMICOLON    shift, and go to state 20
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 10 ($@1)

    stmt        go to state 161
    $@1         go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 35
    const       go to state 36
    ifstmt      go to state 37
    whilestmt   go to state 38
    forstmt     go to state 39
    returnstmt  go to state 40


state 143

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   38 assignexpr: lvalue $@2 ASSIGN expr .

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77

    $default  reduce using rule 38 (assignexpr)


state 144

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   50 member: lvalue $@3 L_S_BRACKET expr . R_S_BRACKET

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77
    R_S_BRACKET  shift, and go to state 162


state 145

   60 normcall: L_PARENTH elist . R_PARENTH
   63 elist: elist . COMA expr

    R_PARENTH  shift, and go to state 163
    COMA       shift, and go to state 137


state 146

   61 methodcall: D_DOT ID . L_PARENTH elist R_PARENTH

    L_PARENTH  shift, and go to state 164


state 147

   52 member: call L_S_BRACKET expr R_S_BRACKET .

    $default  reduce using rule 52 (member)


state 148

   54 call: call $@4 L_PARENTH elist . R_PARENTH
   63 elist: elist . COMA expr

    R_PARENTH  shift, and go to state 165
    COMA       shift, and go to state 137


state 149

   95 ifstmt: ifstmt ELSE $@15 stmt .

    $default  reduce using rule 95 (ifstmt)


state 150

   98 whilestmt: WHILE $@16 L_PARENTH expr R_PARENTH . $@17 stmt

    $default  reduce using rule 97 ($@17)

    $@17  go to state 166


state 151

  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON . $@19 expr $@20 SEMICOLON $@21 elist R_PARENTH $@22 stmt

    $default  reduce using rule 100 ($@19)

    $@19  go to state 167


state 152

   93 ifstmt: IF $@13 L_PARENTH expr R_PARENTH . $@14 stmt

    $default  reduce using rule 92 ($@14)

    $@14  go to state 168


state 153

   78 funcdef: FUNCTION ID $@9 L_PARENTH idlist . R_PARENTH $@10 block
   89 idlist: idlist . COMA ID

    R_PARENTH  shift, and go to state 169
    COMA       shift, and go to state 155


state 154

   81 funcdef: FUNCTION L_PARENTH $@11 idlist R_PARENTH . $@12 block

    $default  reduce using rule 80 ($@12)

    $@12  go to state 170


state 155

   89 idlist: idlist COMA . ID

    ID  shift, and go to state 171


state 156

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   63 elist: elist COMA expr .

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77

    $default  reduce using rule 63 (elist)


state 157

   71 indexedelem: L_C_BRACKET expr COLON . expr R_C_BRACKET

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 172
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 158

   70 indexed: indexed COMA indexedelem .

    $default  reduce using rule 70 (indexed)


state 159

   57 call: L_PARENTH funcdef R_PARENTH L_PARENTH elist . R_PARENTH
   63 elist: elist . COMA expr

    R_PARENTH  shift, and go to state 173
    COMA       shift, and go to state 137


state 160

   73 block: L_C_BRACKET $@8 insideblock R_C_BRACKET .

    $default  reduce using rule 73 (block)


state 161

   74 insideblock: insideblock stmt .

    $default  reduce using rule 74 (insideblock)


state 162

   50 member: lvalue $@3 L_S_BRACKET expr R_S_BRACKET .

    $default  reduce using rule 50 (member)


state 163

   60 normcall: L_PARENTH elist R_PARENTH .

    $default  reduce using rule 60 (normcall)


state 164

   61 methodcall: D_DOT ID L_PARENTH . elist R_PARENTH

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 64 (elist)

    expr        go to state 96
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 174
    objectdef   go to state 34
    const       go to state 36


state 165

   54 call: call $@4 L_PARENTH elist R_PARENTH .

    $default  reduce using rule 54 (call)


state 166

   98 whilestmt: WHILE $@16 L_PARENTH expr R_PARENTH $@17 . stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    FUNCTION     shift, and go to state 6
    RETURN       shift, and go to state 7
    BREAK        shift, and go to state 8
    CONT         shift, and go to state 9
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    SEMICOLON    shift, and go to state 20
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 10 ($@1)

    stmt        go to state 175
    $@1         go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 35
    const       go to state 36
    ifstmt      go to state 37
    whilestmt   go to state 38
    forstmt     go to state 39
    returnstmt  go to state 40


state 167

  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 . expr $@20 SEMICOLON $@21 elist R_PARENTH $@22 stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    expr        go to state 176
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    const       go to state 36


state 168

   93 ifstmt: IF $@13 L_PARENTH expr R_PARENTH $@14 . stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    FUNCTION     shift, and go to state 6
    RETURN       shift, and go to state 7
    BREAK        shift, and go to state 8
    CONT         shift, and go to state 9
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    SEMICOLON    shift, and go to state 20
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 10 ($@1)

    stmt        go to state 177
    $@1         go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 35
    const       go to state 36
    ifstmt      go to state 37
    whilestmt   go to state 38
    forstmt     go to state 39
    returnstmt  go to state 40


state 169

   78 funcdef: FUNCTION ID $@9 L_PARENTH idlist R_PARENTH . $@10 block

    $default  reduce using rule 77 ($@10)

    $@10  go to state 178


state 170

   81 funcdef: FUNCTION L_PARENTH $@11 idlist R_PARENTH $@12 . block

    L_C_BRACKET  shift, and go to state 63

    block  go to state 179


state 171

   89 idlist: idlist COMA ID .

    $default  reduce using rule 89 (idlist)


state 172

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
   71 indexedelem: L_C_BRACKET expr COLON expr . R_C_BRACKET

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77
    R_C_BRACKET  shift, and go to state 180


state 173

   57 call: L_PARENTH funcdef R_PARENTH L_PARENTH elist R_PARENTH .

    $default  reduce using rule 57 (call)


state 174

   61 methodcall: D_DOT ID L_PARENTH elist . R_PARENTH
   63 elist: elist . COMA expr

    R_PARENTH  shift, and go to state 181
    COMA       shift, and go to state 137


state 175

   98 whilestmt: WHILE $@16 L_PARENTH expr R_PARENTH $@17 stmt .

    $default  reduce using rule 98 (whilestmt)


state 176

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULTIPLY expr
   18     | expr . MODULE expr
   19     | expr . DIVIDE expr
   20     | expr . GREAT_EQUAL expr
   21     | expr . LESS_EQUAL expr
   22     | expr . GREATER expr
   23     | expr . LESS expr
   24     | expr . EQUAL expr
   25     | expr . NOTEQUAL expr
   26     | expr . AND expr
   27     | expr . OR expr
  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 expr . $@20 SEMICOLON $@21 elist R_PARENTH $@22 stmt

    AND          shift, and go to state 65
    OR           shift, and go to state 66
    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    MULTIPLY     shift, and go to state 69
    MODULE       shift, and go to state 70
    DIVIDE       shift, and go to state 71
    GREAT_EQUAL  shift, and go to state 72
    LESS_EQUAL   shift, and go to state 73
    GREATER      shift, and go to state 74
    LESS         shift, and go to state 75
    EQUAL        shift, and go to state 76
    NOTEQUAL     shift, and go to state 77

    $default  reduce using rule 101 ($@20)

    $@20  go to state 182


state 177

   93 ifstmt: IF $@13 L_PARENTH expr R_PARENTH $@14 stmt .

    $default  reduce using rule 93 (ifstmt)


state 178

   78 funcdef: FUNCTION ID $@9 L_PARENTH idlist R_PARENTH $@10 . block

    L_C_BRACKET  shift, and go to state 63

    block  go to state 183


state 179

   81 funcdef: FUNCTION L_PARENTH $@11 idlist R_PARENTH $@12 block .

    $default  reduce using rule 81 (funcdef)


state 180

   71 indexedelem: L_C_BRACKET expr COLON expr R_C_BRACKET .

    $default  reduce using rule 71 (indexedelem)


state 181

   61 methodcall: D_DOT ID L_PARENTH elist R_PARENTH .

    $default  reduce using rule 61 (methodcall)


state 182

  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 expr $@20 . SEMICOLON $@21 elist R_PARENTH $@22 stmt

    SEMICOLON  shift, and go to state 184


state 183

   78 funcdef: FUNCTION ID $@9 L_PARENTH idlist R_PARENTH $@10 block .

    $default  reduce using rule 78 (funcdef)


state 184

  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 expr $@20 SEMICOLON . $@21 elist R_PARENTH $@22 stmt

    $default  reduce using rule 102 ($@21)

    $@21  go to state 185


state 185

  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 expr $@20 SEMICOLON $@21 . elist R_PARENTH $@22 stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 64 (elist)

    expr        go to state 96
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    elist       go to state 186
    objectdef   go to state 34
    const       go to state 36


state 186

   63 elist: elist . COMA expr
  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 expr $@20 SEMICOLON $@21 elist . R_PARENTH $@22 stmt

    R_PARENTH  shift, and go to state 187
    COMA       shift, and go to state 137


state 187

  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 expr $@20 SEMICOLON $@21 elist R_PARENTH . $@22 stmt

    $default  reduce using rule 103 ($@22)

    $@22  go to state 188


state 188

  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 expr $@20 SEMICOLON $@21 elist R_PARENTH $@22 . stmt

    ID           shift, and go to state 1
    STRING       shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    IF           shift, and go to state 5
    FUNCTION     shift, and go to state 6
    RETURN       shift, and go to state 7
    BREAK        shift, and go to state 8
    CONT         shift, and go to state 9
    LOCAL        shift, and go to state 10
    TRUE         shift, and go to state 11
    FALSE        shift, and go to state 12
    NIL          shift, and go to state 13
    NOT          shift, and go to state 14
    MINUS        shift, and go to state 15
    DECREASE     shift, and go to state 16
    INCREASE     shift, and go to state 17
    L_S_BRACKET  shift, and go to state 18
    L_PARENTH    shift, and go to state 19
    SEMICOLON    shift, and go to state 20
    D_COLON      shift, and go to state 21
    INTCONST     shift, and go to state 22
    RCONST       shift, and go to state 23

    $default  reduce using rule 10 ($@1)

    stmt        go to state 189
    $@1         go to state 26
    expr        go to state 27
    term        go to state 28
    assignexpr  go to state 29
    primary     go to state 30
    lvalue      go to state 31
    member      go to state 32
    call        go to state 33
    objectdef   go to state 34
    funcdef     go to state 35
    const       go to state 36
    ifstmt      go to state 37
    whilestmt   go to state 38
    forstmt     go to state 39
    returnstmt  go to state 40


state 189

  104 forstmt: FOR $@18 L_PARENTH elist SEMICOLON $@19 expr $@20 SEMICOLON $@21 elist R_PARENTH $@22 stmt .

    $default  reduce using rule 104 (forstmt)
